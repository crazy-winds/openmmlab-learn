2023/06/07 07:50:47 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.16 (main, Mar  8 2023, 14:00:05) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1336950318
    GPU 0,1: NVIDIA GeForce RTX 3060 Ti
    CUDA_HOME: /usr/local/cuda-11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.64
    GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
    PyTorch: 2.0.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/07 07:50:47 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch',
        frozen_stages=1),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=30,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
data_preprocessor = dict(
    num_classes=30,
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', scale=224),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(type='PackInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='ResizeEdge', scale=256, edge='short'),
    dict(type='CenterCrop', crop_size=224),
    dict(type='PackInputs')
]
train_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='ImageNet',
        data_root='fruit_dataset/',
        ann_file='',
        data_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', scale=224),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='PackInputs')
        ],
        metainfo=dict(classes=[
            '哈密瓜', '圣女果', '山竹', '杨梅', '柚子', '柠檬', '桂圆', '梨', '椰子', '榴莲', '火龙果',
            '猕猴桃', '石榴', '砂糖橘', '胡萝卜', '脐橙', '芒果', '苦瓜', '苹果-红', '苹果-青', '草莓',
            '荔枝', '菠萝', '葡萄-白', '葡萄-红', '西瓜', '西红柿', '车厘子', '香蕉', '黄瓜'
        ])),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='ImageNet',
        data_root='fruit_dataset/',
        ann_file='',
        data_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ],
        metainfo=dict(classes=[
            '哈密瓜', '圣女果', '山竹', '杨梅', '柚子', '柠檬', '桂圆', '梨', '椰子', '榴莲', '火龙果',
            '猕猴桃', '石榴', '砂糖橘', '胡萝卜', '脐橙', '芒果', '苦瓜', '苹果-红', '苹果-青', '草莓',
            '荔枝', '菠萝', '葡萄-白', '葡萄-红', '西瓜', '西红柿', '车厘子', '香蕉', '黄瓜'
        ])),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=(1, ))
test_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='ImageNet',
        data_root='fruit_dataset/',
        ann_file='',
        data_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ],
        metainfo=dict(classes=[
            '哈密瓜', '圣女果', '山竹', '杨梅', '柚子', '柠檬', '桂圆', '梨', '椰子', '榴莲', '火龙果',
            '猕猴桃', '石榴', '砂糖橘', '胡萝卜', '脐橙', '芒果', '苦瓜', '苹果-红', '苹果-青', '草莓',
            '荔枝', '菠萝', '葡萄-白', '葡萄-红', '西瓜', '西红柿', '车厘子', '香蕉', '黄瓜'
        ])),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=(1, 5))
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001))
param_scheduler = dict(
    type='MultiStepLR', by_epoch=True, milestones=[10, 20, 30], gamma=0.5)
train_cfg = dict(by_epoch=True, max_epochs=40, val_interval=1)
val_cfg = dict()
test_cfg = dict()
auto_scale_lr = dict(base_batch_size=256)
default_scope = 'mmpretrain'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=1, max_keep_ckpts=5, save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
load_from = 'checkpoint/resnet50_8xb32_in1k_20210831-ea4938fc.pth'
resume = False
randomness = dict(seed=None, deterministic=False)
metainfo = dict(classes=[
    '哈密瓜', '圣女果', '山竹', '杨梅', '柚子', '柠檬', '桂圆', '梨', '椰子', '榴莲', '火龙果', '猕猴桃',
    '石榴', '砂糖橘', '胡萝卜', '脐橙', '芒果', '苦瓜', '苹果-红', '苹果-青', '草莓', '荔枝', '菠萝',
    '葡萄-白', '葡萄-红', '西瓜', '西红柿', '车厘子', '香蕉', '黄瓜'
])
num_classes = 30
work_dir = 'work_dir'
launcher = 'none'

2023/06/07 07:50:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/07 07:50:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([30, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([30]): 
NormalInit: mean=0, std=0.01, bias=0 
2023/06/07 07:50:50 - mmengine - INFO - Load checkpoint from checkpoint/resnet50_8xb32_in1k_20210831-ea4938fc.pth
2023/06/07 07:50:50 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/07 07:50:50 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/07 07:50:50 - mmengine - INFO - Checkpoints will be saved to /home/zhy/mmlab lear/fruit_30_cls/work_dir.
2023/06/07 07:51:02 - mmengine - INFO - Epoch(train)  [1][100/137]  lr: 1.0000e-01  eta: 0:10:33  time: 0.1029  data_time: 0.0004  memory: 1699  loss: 3.0840
2023/06/07 07:51:05 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:51:05 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/06/07 07:51:11 - mmengine - INFO - Epoch(val)  [1][100/137]    eta: 0:00:01  time: 0.0451  data_time: 0.0015  memory: 1699  
2023/06/07 07:51:13 - mmengine - INFO - Epoch(val) [1][137/137]    accuracy/top1: 12.0914  data_time: 0.0044  time: 0.0480
2023/06/07 07:51:13 - mmengine - INFO - The best checkpoint with 12.0914 accuracy/top1 at 1 epoch is saved to best_accuracy_top1_epoch_1.pth.
2023/06/07 07:51:24 - mmengine - INFO - Epoch(train)  [2][100/137]  lr: 1.0000e-01  eta: 0:09:37  time: 0.1032  data_time: 0.0005  memory: 1699  loss: 2.4875
2023/06/07 07:51:27 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:51:27 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/06/07 07:51:33 - mmengine - INFO - Epoch(val)  [2][100/137]    eta: 0:00:01  time: 0.0460  data_time: 0.0024  memory: 1699  
2023/06/07 07:51:34 - mmengine - INFO - Epoch(val) [2][137/137]    accuracy/top1: 30.6286  data_time: 0.0038  time: 0.0473
2023/06/07 07:51:34 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_1.pth is removed
2023/06/07 07:51:35 - mmengine - INFO - The best checkpoint with 30.6286 accuracy/top1 at 2 epoch is saved to best_accuracy_top1_epoch_2.pth.
2023/06/07 07:51:45 - mmengine - INFO - Epoch(train)  [3][100/137]  lr: 1.0000e-01  eta: 0:09:12  time: 0.1035  data_time: 0.0004  memory: 1699  loss: 1.9405
2023/06/07 07:51:49 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:51:49 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/06/07 07:51:55 - mmengine - INFO - Epoch(val)  [3][100/137]    eta: 0:00:01  time: 0.0440  data_time: 0.0003  memory: 1699  
2023/06/07 07:51:56 - mmengine - INFO - Epoch(val) [3][137/137]    accuracy/top1: 42.3543  data_time: 0.0034  time: 0.0470
2023/06/07 07:51:56 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_2.pth is removed
2023/06/07 07:51:57 - mmengine - INFO - The best checkpoint with 42.3543 accuracy/top1 at 3 epoch is saved to best_accuracy_top1_epoch_3.pth.
2023/06/07 07:52:07 - mmengine - INFO - Epoch(train)  [4][100/137]  lr: 1.0000e-01  eta: 0:08:53  time: 0.1035  data_time: 0.0005  memory: 1699  loss: 1.9040
2023/06/07 07:52:11 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:52:11 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/06/07 07:52:16 - mmengine - INFO - Epoch(val)  [4][100/137]    eta: 0:00:01  time: 0.0464  data_time: 0.0025  memory: 1699  
2023/06/07 07:52:18 - mmengine - INFO - Epoch(val) [4][137/137]    accuracy/top1: 50.5143  data_time: 0.0038  time: 0.0474
2023/06/07 07:52:18 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_3.pth is removed
2023/06/07 07:52:18 - mmengine - INFO - The best checkpoint with 50.5143 accuracy/top1 at 4 epoch is saved to best_accuracy_top1_epoch_4.pth.
2023/06/07 07:52:29 - mmengine - INFO - Epoch(train)  [5][100/137]  lr: 1.0000e-01  eta: 0:08:37  time: 0.1037  data_time: 0.0005  memory: 1699  loss: 1.6910
2023/06/07 07:52:33 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:52:33 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/06/07 07:52:38 - mmengine - INFO - Epoch(val)  [5][100/137]    eta: 0:00:01  time: 0.0495  data_time: 0.0057  memory: 1699  
2023/06/07 07:52:40 - mmengine - INFO - Epoch(val) [5][137/137]    accuracy/top1: 54.7200  data_time: 0.0037  time: 0.0474
2023/06/07 07:52:40 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_4.pth is removed
2023/06/07 07:52:40 - mmengine - INFO - The best checkpoint with 54.7200 accuracy/top1 at 5 epoch is saved to best_accuracy_top1_epoch_5.pth.
2023/06/07 07:52:51 - mmengine - INFO - Epoch(train)  [6][100/137]  lr: 1.0000e-01  eta: 0:08:20  time: 0.1037  data_time: 0.0005  memory: 1699  loss: 1.6716
2023/06/07 07:52:55 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:52:55 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/06/07 07:53:00 - mmengine - INFO - Epoch(val)  [6][100/137]    eta: 0:00:01  time: 0.0442  data_time: 0.0003  memory: 1699  
2023/06/07 07:53:02 - mmengine - INFO - Epoch(val) [6][137/137]    accuracy/top1: 60.0229  data_time: 0.0037  time: 0.0474
2023/06/07 07:53:02 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_5.pth is removed
2023/06/07 07:53:02 - mmengine - INFO - The best checkpoint with 60.0229 accuracy/top1 at 6 epoch is saved to best_accuracy_top1_epoch_6.pth.
2023/06/07 07:53:13 - mmengine - INFO - Epoch(train)  [7][100/137]  lr: 1.0000e-01  eta: 0:08:05  time: 0.1037  data_time: 0.0004  memory: 1699  loss: 1.5165
2023/06/07 07:53:17 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:53:17 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/06/07 07:53:22 - mmengine - INFO - Epoch(val)  [7][100/137]    eta: 0:00:01  time: 0.0483  data_time: 0.0045  memory: 1699  
2023/06/07 07:53:24 - mmengine - INFO - Epoch(val) [7][137/137]    accuracy/top1: 61.3257  data_time: 0.0030  time: 0.0473
2023/06/07 07:53:24 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_6.pth is removed
2023/06/07 07:53:24 - mmengine - INFO - The best checkpoint with 61.3257 accuracy/top1 at 7 epoch is saved to best_accuracy_top1_epoch_7.pth.
2023/06/07 07:53:28 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:53:35 - mmengine - INFO - Epoch(train)  [8][100/137]  lr: 1.0000e-01  eta: 0:07:49  time: 0.1038  data_time: 0.0005  memory: 1699  loss: 1.6434
2023/06/07 07:53:38 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:53:38 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/06/07 07:53:44 - mmengine - INFO - Epoch(val)  [8][100/137]    eta: 0:00:01  time: 0.0441  data_time: 0.0003  memory: 1699  
2023/06/07 07:53:45 - mmengine - INFO - Epoch(val) [8][137/137]    accuracy/top1: 66.0114  data_time: 0.0031  time: 0.0468
2023/06/07 07:53:45 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_7.pth is removed
2023/06/07 07:53:46 - mmengine - INFO - The best checkpoint with 66.0114 accuracy/top1 at 8 epoch is saved to best_accuracy_top1_epoch_8.pth.
2023/06/07 07:53:56 - mmengine - INFO - Epoch(train)  [9][100/137]  lr: 1.0000e-01  eta: 0:07:34  time: 0.1038  data_time: 0.0005  memory: 1699  loss: 1.3476
2023/06/07 07:54:00 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:54:00 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/06/07 07:54:06 - mmengine - INFO - Epoch(val)  [9][100/137]    eta: 0:00:01  time: 0.0467  data_time: 0.0028  memory: 1699  
2023/06/07 07:54:07 - mmengine - INFO - Epoch(val) [9][137/137]    accuracy/top1: 67.4971  data_time: 0.0037  time: 0.0474
2023/06/07 07:54:07 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_8.pth is removed
2023/06/07 07:54:08 - mmengine - INFO - The best checkpoint with 67.4971 accuracy/top1 at 9 epoch is saved to best_accuracy_top1_epoch_9.pth.
2023/06/07 07:54:18 - mmengine - INFO - Epoch(train) [10][100/137]  lr: 1.0000e-01  eta: 0:07:19  time: 0.1037  data_time: 0.0005  memory: 1699  loss: 1.2633
2023/06/07 07:54:22 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:54:22 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/07 07:54:27 - mmengine - INFO - Epoch(val) [10][100/137]    eta: 0:00:01  time: 0.0475  data_time: 0.0036  memory: 1699  
2023/06/07 07:54:29 - mmengine - INFO - Epoch(val) [10][137/137]    accuracy/top1: 65.3943  data_time: 0.0039  time: 0.0476
2023/06/07 07:54:40 - mmengine - INFO - Epoch(train) [11][100/137]  lr: 5.0000e-02  eta: 0:07:05  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 1.1284
2023/06/07 07:54:44 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:54:44 - mmengine - INFO - Saving checkpoint at 11 epochs
2023/06/07 07:54:49 - mmengine - INFO - Epoch(val) [11][100/137]    eta: 0:00:01  time: 0.0499  data_time: 0.0060  memory: 1699  
2023/06/07 07:54:51 - mmengine - INFO - Epoch(val) [11][137/137]    accuracy/top1: 74.9943  data_time: 0.0038  time: 0.0475
2023/06/07 07:54:51 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_9.pth is removed
2023/06/07 07:54:51 - mmengine - INFO - The best checkpoint with 74.9943 accuracy/top1 at 11 epoch is saved to best_accuracy_top1_epoch_11.pth.
2023/06/07 07:55:02 - mmengine - INFO - Epoch(train) [12][100/137]  lr: 5.0000e-02  eta: 0:06:50  time: 0.1038  data_time: 0.0004  memory: 1699  loss: 1.1906
2023/06/07 07:55:05 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:55:05 - mmengine - INFO - Saving checkpoint at 12 epochs
2023/06/07 07:55:11 - mmengine - INFO - Epoch(val) [12][100/137]    eta: 0:00:01  time: 0.0489  data_time: 0.0050  memory: 1699  
2023/06/07 07:55:13 - mmengine - INFO - Epoch(val) [12][137/137]    accuracy/top1: 74.7657  data_time: 0.0036  time: 0.0473
2023/06/07 07:55:23 - mmengine - INFO - Epoch(train) [13][100/137]  lr: 5.0000e-02  eta: 0:06:35  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 1.0819
2023/06/07 07:55:27 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:55:27 - mmengine - INFO - Saving checkpoint at 13 epochs
2023/06/07 07:55:32 - mmengine - INFO - Epoch(val) [13][100/137]    eta: 0:00:01  time: 0.0448  data_time: 0.0009  memory: 1699  
2023/06/07 07:55:34 - mmengine - INFO - Epoch(val) [13][137/137]    accuracy/top1: 75.4057  data_time: 0.0038  time: 0.0475
2023/06/07 07:55:34 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_11.pth is removed
2023/06/07 07:55:34 - mmengine - INFO - The best checkpoint with 75.4057 accuracy/top1 at 13 epoch is saved to best_accuracy_top1_epoch_13.pth.
2023/06/07 07:55:45 - mmengine - INFO - Epoch(train) [14][100/137]  lr: 5.0000e-02  eta: 0:06:20  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 1.0733
2023/06/07 07:55:49 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:55:49 - mmengine - INFO - Saving checkpoint at 14 epochs
2023/06/07 07:55:54 - mmengine - INFO - Epoch(val) [14][100/137]    eta: 0:00:01  time: 0.0493  data_time: 0.0054  memory: 1699  
2023/06/07 07:55:56 - mmengine - INFO - Epoch(val) [14][137/137]    accuracy/top1: 77.4171  data_time: 0.0035  time: 0.0472
2023/06/07 07:55:56 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_13.pth is removed
2023/06/07 07:55:56 - mmengine - INFO - The best checkpoint with 77.4171 accuracy/top1 at 14 epoch is saved to best_accuracy_top1_epoch_14.pth.
2023/06/07 07:56:05 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:56:07 - mmengine - INFO - Epoch(train) [15][100/137]  lr: 5.0000e-02  eta: 0:06:06  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 1.0360
2023/06/07 07:56:11 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:56:11 - mmengine - INFO - Saving checkpoint at 15 epochs
2023/06/07 07:56:16 - mmengine - INFO - Epoch(val) [15][100/137]    eta: 0:00:01  time: 0.0442  data_time: 0.0003  memory: 1699  
2023/06/07 07:56:18 - mmengine - INFO - Epoch(val) [15][137/137]    accuracy/top1: 78.2171  data_time: 0.0032  time: 0.0475
2023/06/07 07:56:18 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_14.pth is removed
2023/06/07 07:56:18 - mmengine - INFO - The best checkpoint with 78.2171 accuracy/top1 at 15 epoch is saved to best_accuracy_top1_epoch_15.pth.
2023/06/07 07:56:29 - mmengine - INFO - Epoch(train) [16][100/137]  lr: 5.0000e-02  eta: 0:05:51  time: 0.1040  data_time: 0.0004  memory: 1699  loss: 0.9880
2023/06/07 07:56:33 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:56:33 - mmengine - INFO - Saving checkpoint at 16 epochs
2023/06/07 07:56:38 - mmengine - INFO - Epoch(val) [16][100/137]    eta: 0:00:01  time: 0.0503  data_time: 0.0063  memory: 1699  
2023/06/07 07:56:40 - mmengine - INFO - Epoch(val) [16][137/137]    accuracy/top1: 76.3200  data_time: 0.0032  time: 0.0470
2023/06/07 07:56:50 - mmengine - INFO - Epoch(train) [17][100/137]  lr: 5.0000e-02  eta: 0:05:37  time: 0.1040  data_time: 0.0004  memory: 1699  loss: 0.9643
2023/06/07 07:56:54 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:56:54 - mmengine - INFO - Saving checkpoint at 17 epochs
2023/06/07 07:56:59 - mmengine - INFO - Epoch(val) [17][100/137]    eta: 0:00:01  time: 0.0522  data_time: 0.0082  memory: 1699  
2023/06/07 07:57:01 - mmengine - INFO - Epoch(val) [17][137/137]    accuracy/top1: 79.4286  data_time: 0.0035  time: 0.0473
2023/06/07 07:57:01 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_15.pth is removed
2023/06/07 07:57:01 - mmengine - INFO - The best checkpoint with 79.4286 accuracy/top1 at 17 epoch is saved to best_accuracy_top1_epoch_17.pth.
2023/06/07 07:57:12 - mmengine - INFO - Epoch(train) [18][100/137]  lr: 5.0000e-02  eta: 0:05:22  time: 0.1040  data_time: 0.0004  memory: 1699  loss: 0.9296
2023/06/07 07:57:16 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:57:16 - mmengine - INFO - Saving checkpoint at 18 epochs
2023/06/07 07:57:21 - mmengine - INFO - Epoch(val) [18][100/137]    eta: 0:00:01  time: 0.0480  data_time: 0.0040  memory: 1699  
2023/06/07 07:57:23 - mmengine - INFO - Epoch(val) [18][137/137]    accuracy/top1: 77.8286  data_time: 0.0038  time: 0.0476
2023/06/07 07:57:34 - mmengine - INFO - Epoch(train) [19][100/137]  lr: 5.0000e-02  eta: 0:05:08  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 0.9784
2023/06/07 07:57:37 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:57:37 - mmengine - INFO - Saving checkpoint at 19 epochs
2023/06/07 07:57:43 - mmengine - INFO - Epoch(val) [19][100/137]    eta: 0:00:01  time: 0.0451  data_time: 0.0011  memory: 1699  
2023/06/07 07:57:44 - mmengine - INFO - Epoch(val) [19][137/137]    accuracy/top1: 80.0686  data_time: 0.0034  time: 0.0471
2023/06/07 07:57:44 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_17.pth is removed
2023/06/07 07:57:45 - mmengine - INFO - The best checkpoint with 80.0686 accuracy/top1 at 19 epoch is saved to best_accuracy_top1_epoch_19.pth.
2023/06/07 07:57:56 - mmengine - INFO - Epoch(train) [20][100/137]  lr: 5.0000e-02  eta: 0:04:53  time: 0.1040  data_time: 0.0004  memory: 1699  loss: 0.9140
2023/06/07 07:57:59 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:57:59 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/07 07:58:05 - mmengine - INFO - Epoch(val) [20][100/137]    eta: 0:00:01  time: 0.0464  data_time: 0.0025  memory: 1699  
2023/06/07 07:58:06 - mmengine - INFO - Epoch(val) [20][137/137]    accuracy/top1: 82.4000  data_time: 0.0039  time: 0.0477
2023/06/07 07:58:06 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_19.pth is removed
2023/06/07 07:58:07 - mmengine - INFO - The best checkpoint with 82.4000 accuracy/top1 at 20 epoch is saved to best_accuracy_top1_epoch_20.pth.
2023/06/07 07:58:17 - mmengine - INFO - Epoch(train) [21][100/137]  lr: 2.5000e-02  eta: 0:04:39  time: 0.1040  data_time: 0.0004  memory: 1699  loss: 0.8225
2023/06/07 07:58:21 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:58:21 - mmengine - INFO - Saving checkpoint at 21 epochs
2023/06/07 07:58:27 - mmengine - INFO - Epoch(val) [21][100/137]    eta: 0:00:01  time: 0.0442  data_time: 0.0003  memory: 1699  
2023/06/07 07:58:28 - mmengine - INFO - Epoch(val) [21][137/137]    accuracy/top1: 83.3371  data_time: 0.0038  time: 0.0476
2023/06/07 07:58:28 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_20.pth is removed
2023/06/07 07:58:29 - mmengine - INFO - The best checkpoint with 83.3371 accuracy/top1 at 21 epoch is saved to best_accuracy_top1_epoch_21.pth.
2023/06/07 07:58:39 - mmengine - INFO - Epoch(train) [22][100/137]  lr: 2.5000e-02  eta: 0:04:24  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 0.7450
2023/06/07 07:58:42 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:58:43 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:58:43 - mmengine - INFO - Saving checkpoint at 22 epochs
2023/06/07 07:58:49 - mmengine - INFO - Epoch(val) [22][100/137]    eta: 0:00:01  time: 0.0443  data_time: 0.0002  memory: 1699  
2023/06/07 07:58:50 - mmengine - INFO - Epoch(val) [22][137/137]    accuracy/top1: 84.0229  data_time: 0.0039  time: 0.0483
2023/06/07 07:58:50 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_21.pth is removed
2023/06/07 07:58:51 - mmengine - INFO - The best checkpoint with 84.0229 accuracy/top1 at 22 epoch is saved to best_accuracy_top1_epoch_22.pth.
2023/06/07 07:59:01 - mmengine - INFO - Epoch(train) [23][100/137]  lr: 2.5000e-02  eta: 0:04:09  time: 0.1039  data_time: 0.0004  memory: 1699  loss: 0.6985
2023/06/07 07:59:05 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:59:05 - mmengine - INFO - Saving checkpoint at 23 epochs
2023/06/07 07:59:11 - mmengine - INFO - Epoch(val) [23][100/137]    eta: 0:00:01  time: 0.0441  data_time: 0.0003  memory: 1699  
2023/06/07 07:59:12 - mmengine - INFO - Epoch(val) [23][137/137]    accuracy/top1: 86.1029  data_time: 0.0037  time: 0.0474
2023/06/07 07:59:12 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_22.pth is removed
2023/06/07 07:59:13 - mmengine - INFO - The best checkpoint with 86.1029 accuracy/top1 at 23 epoch is saved to best_accuracy_top1_epoch_23.pth.
2023/06/07 07:59:23 - mmengine - INFO - Epoch(train) [24][100/137]  lr: 2.5000e-02  eta: 0:03:55  time: 0.1039  data_time: 0.0004  memory: 1699  loss: 0.7161
2023/06/07 07:59:27 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:59:27 - mmengine - INFO - Saving checkpoint at 24 epochs
2023/06/07 07:59:32 - mmengine - INFO - Epoch(val) [24][100/137]    eta: 0:00:01  time: 0.0501  data_time: 0.0061  memory: 1699  
2023/06/07 07:59:34 - mmengine - INFO - Epoch(val) [24][137/137]    accuracy/top1: 86.6971  data_time: 0.0040  time: 0.0478
2023/06/07 07:59:34 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_23.pth is removed
2023/06/07 07:59:34 - mmengine - INFO - The best checkpoint with 86.6971 accuracy/top1 at 24 epoch is saved to best_accuracy_top1_epoch_24.pth.
2023/06/07 07:59:45 - mmengine - INFO - Epoch(train) [25][100/137]  lr: 2.5000e-02  eta: 0:03:41  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 0.6667
2023/06/07 07:59:49 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 07:59:49 - mmengine - INFO - Saving checkpoint at 25 epochs
2023/06/07 07:59:54 - mmengine - INFO - Epoch(val) [25][100/137]    eta: 0:00:01  time: 0.0465  data_time: 0.0025  memory: 1699  
2023/06/07 07:59:56 - mmengine - INFO - Epoch(val) [25][137/137]    accuracy/top1: 86.8343  data_time: 0.0038  time: 0.0475
2023/06/07 07:59:56 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_24.pth is removed
2023/06/07 07:59:56 - mmengine - INFO - The best checkpoint with 86.8343 accuracy/top1 at 25 epoch is saved to best_accuracy_top1_epoch_25.pth.
2023/06/07 08:00:07 - mmengine - INFO - Epoch(train) [26][100/137]  lr: 2.5000e-02  eta: 0:03:26  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 0.6588
2023/06/07 08:00:11 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:00:11 - mmengine - INFO - Saving checkpoint at 26 epochs
2023/06/07 08:00:16 - mmengine - INFO - Epoch(val) [26][100/137]    eta: 0:00:01  time: 0.0443  data_time: 0.0003  memory: 1699  
2023/06/07 08:00:18 - mmengine - INFO - Epoch(val) [26][137/137]    accuracy/top1: 87.6114  data_time: 0.0037  time: 0.0474
2023/06/07 08:00:18 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_25.pth is removed
2023/06/07 08:00:18 - mmengine - INFO - The best checkpoint with 87.6114 accuracy/top1 at 26 epoch is saved to best_accuracy_top1_epoch_26.pth.
2023/06/07 08:00:29 - mmengine - INFO - Epoch(train) [27][100/137]  lr: 2.5000e-02  eta: 0:03:12  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 0.7829
2023/06/07 08:00:33 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:00:33 - mmengine - INFO - Saving checkpoint at 27 epochs
2023/06/07 08:00:38 - mmengine - INFO - Epoch(val) [27][100/137]    eta: 0:00:01  time: 0.0442  data_time: 0.0003  memory: 1699  
2023/06/07 08:00:40 - mmengine - INFO - Epoch(val) [27][137/137]    accuracy/top1: 87.1543  data_time: 0.0039  time: 0.0477
2023/06/07 08:00:51 - mmengine - INFO - Epoch(train) [28][100/137]  lr: 2.5000e-02  eta: 0:02:57  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 0.6925
2023/06/07 08:00:54 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:00:54 - mmengine - INFO - Saving checkpoint at 28 epochs
2023/06/07 08:01:00 - mmengine - INFO - Epoch(val) [28][100/137]    eta: 0:00:01  time: 0.0474  data_time: 0.0034  memory: 1699  
2023/06/07 08:01:01 - mmengine - INFO - Epoch(val) [28][137/137]    accuracy/top1: 88.8686  data_time: 0.0038  time: 0.0476
2023/06/07 08:01:01 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_26.pth is removed
2023/06/07 08:01:02 - mmengine - INFO - The best checkpoint with 88.8686 accuracy/top1 at 28 epoch is saved to best_accuracy_top1_epoch_28.pth.
2023/06/07 08:01:12 - mmengine - INFO - Epoch(train) [29][100/137]  lr: 2.5000e-02  eta: 0:02:43  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 0.7496
2023/06/07 08:01:16 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:01:16 - mmengine - INFO - Saving checkpoint at 29 epochs
2023/06/07 08:01:22 - mmengine - INFO - Epoch(val) [29][100/137]    eta: 0:00:01  time: 0.0442  data_time: 0.0003  memory: 1699  
2023/06/07 08:01:23 - mmengine - INFO - Epoch(val) [29][137/137]    accuracy/top1: 88.0686  data_time: 0.0038  time: 0.0476
2023/06/07 08:01:26 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:01:34 - mmengine - INFO - Epoch(train) [30][100/137]  lr: 2.5000e-02  eta: 0:02:28  time: 0.1038  data_time: 0.0005  memory: 1699  loss: 0.7518
2023/06/07 08:01:38 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:01:38 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/07 08:01:43 - mmengine - INFO - Epoch(val) [30][100/137]    eta: 0:00:01  time: 0.0491  data_time: 0.0051  memory: 1699  
2023/06/07 08:01:45 - mmengine - INFO - Epoch(val) [30][137/137]    accuracy/top1: 89.3029  data_time: 0.0037  time: 0.0475
2023/06/07 08:01:45 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_28.pth is removed
2023/06/07 08:01:45 - mmengine - INFO - The best checkpoint with 89.3029 accuracy/top1 at 30 epoch is saved to best_accuracy_top1_epoch_30.pth.
2023/06/07 08:01:56 - mmengine - INFO - Epoch(train) [31][100/137]  lr: 1.2500e-02  eta: 0:02:14  time: 0.1040  data_time: 0.0005  memory: 1699  loss: 0.5546
2023/06/07 08:02:00 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:02:00 - mmengine - INFO - Saving checkpoint at 31 epochs
2023/06/07 08:02:05 - mmengine - INFO - Epoch(val) [31][100/137]    eta: 0:00:01  time: 0.0499  data_time: 0.0059  memory: 1699  
2023/06/07 08:02:07 - mmengine - INFO - Epoch(val) [31][137/137]    accuracy/top1: 91.6114  data_time: 0.0039  time: 0.0477
2023/06/07 08:02:07 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_30.pth is removed
2023/06/07 08:02:07 - mmengine - INFO - The best checkpoint with 91.6114 accuracy/top1 at 31 epoch is saved to best_accuracy_top1_epoch_31.pth.
2023/06/07 08:02:18 - mmengine - INFO - Epoch(train) [32][100/137]  lr: 1.2500e-02  eta: 0:01:59  time: 0.1040  data_time: 0.0004  memory: 1699  loss: 0.6388
2023/06/07 08:02:22 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:02:22 - mmengine - INFO - Saving checkpoint at 32 epochs
2023/06/07 08:02:27 - mmengine - INFO - Epoch(val) [32][100/137]    eta: 0:00:01  time: 0.0442  data_time: 0.0003  memory: 1699  
2023/06/07 08:02:29 - mmengine - INFO - Epoch(val) [32][137/137]    accuracy/top1: 91.4514  data_time: 0.0036  time: 0.0474
2023/06/07 08:02:39 - mmengine - INFO - Epoch(train) [33][100/137]  lr: 1.2500e-02  eta: 0:01:45  time: 0.1038  data_time: 0.0005  memory: 1699  loss: 0.4947
2023/06/07 08:02:43 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:02:43 - mmengine - INFO - Saving checkpoint at 33 epochs
2023/06/07 08:02:48 - mmengine - INFO - Epoch(val) [33][100/137]    eta: 0:00:01  time: 0.0467  data_time: 0.0027  memory: 1699  
2023/06/07 08:02:50 - mmengine - INFO - Epoch(val) [33][137/137]    accuracy/top1: 91.4971  data_time: 0.0037  time: 0.0475
2023/06/07 08:03:01 - mmengine - INFO - Epoch(train) [34][100/137]  lr: 1.2500e-02  eta: 0:01:30  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 0.5239
2023/06/07 08:03:05 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:03:05 - mmengine - INFO - Saving checkpoint at 34 epochs
2023/06/07 08:03:10 - mmengine - INFO - Epoch(val) [34][100/137]    eta: 0:00:01  time: 0.0488  data_time: 0.0049  memory: 1699  
2023/06/07 08:03:12 - mmengine - INFO - Epoch(val) [34][137/137]    accuracy/top1: 92.5486  data_time: 0.0038  time: 0.0475
2023/06/07 08:03:12 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_31.pth is removed
2023/06/07 08:03:12 - mmengine - INFO - The best checkpoint with 92.5486 accuracy/top1 at 34 epoch is saved to best_accuracy_top1_epoch_34.pth.
2023/06/07 08:03:23 - mmengine - INFO - Epoch(train) [35][100/137]  lr: 1.2500e-02  eta: 0:01:16  time: 0.1039  data_time: 0.0004  memory: 1699  loss: 0.5492
2023/06/07 08:03:26 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:03:26 - mmengine - INFO - Saving checkpoint at 35 epochs
2023/06/07 08:03:32 - mmengine - INFO - Epoch(val) [35][100/137]    eta: 0:00:01  time: 0.0454  data_time: 0.0014  memory: 1699  
2023/06/07 08:03:34 - mmengine - INFO - Epoch(val) [35][137/137]    accuracy/top1: 92.5029  data_time: 0.0038  time: 0.0475
2023/06/07 08:03:44 - mmengine - INFO - Epoch(train) [36][100/137]  lr: 1.2500e-02  eta: 0:01:01  time: 0.1038  data_time: 0.0004  memory: 1699  loss: 0.4854
2023/06/07 08:03:48 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:03:48 - mmengine - INFO - Saving checkpoint at 36 epochs
2023/06/07 08:03:53 - mmengine - INFO - Epoch(val) [36][100/137]    eta: 0:00:01  time: 0.0493  data_time: 0.0053  memory: 1699  
2023/06/07 08:03:55 - mmengine - INFO - Epoch(val) [36][137/137]    accuracy/top1: 92.9829  data_time: 0.0043  time: 0.0480
2023/06/07 08:03:55 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_34.pth is removed
2023/06/07 08:03:56 - mmengine - INFO - The best checkpoint with 92.9829 accuracy/top1 at 36 epoch is saved to best_accuracy_top1_epoch_36.pth.
2023/06/07 08:04:03 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:04:06 - mmengine - INFO - Epoch(train) [37][100/137]  lr: 1.2500e-02  eta: 0:00:47  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 0.5663
2023/06/07 08:04:10 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:04:10 - mmengine - INFO - Saving checkpoint at 37 epochs
2023/06/07 08:04:15 - mmengine - INFO - Epoch(val) [37][100/137]    eta: 0:00:01  time: 0.0441  data_time: 0.0003  memory: 1699  
2023/06/07 08:04:17 - mmengine - INFO - Epoch(val) [37][137/137]    accuracy/top1: 92.5029  data_time: 0.0037  time: 0.0474
2023/06/07 08:04:28 - mmengine - INFO - Epoch(train) [38][100/137]  lr: 1.2500e-02  eta: 0:00:32  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 0.4995
2023/06/07 08:04:31 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:04:31 - mmengine - INFO - Saving checkpoint at 38 epochs
2023/06/07 08:04:37 - mmengine - INFO - Epoch(val) [38][100/137]    eta: 0:00:01  time: 0.0481  data_time: 0.0042  memory: 1699  
2023/06/07 08:04:39 - mmengine - INFO - Epoch(val) [38][137/137]    accuracy/top1: 92.3657  data_time: 0.0039  time: 0.0476
2023/06/07 08:04:49 - mmengine - INFO - Epoch(train) [39][100/137]  lr: 1.2500e-02  eta: 0:00:18  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 0.5682
2023/06/07 08:04:53 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:04:53 - mmengine - INFO - Saving checkpoint at 39 epochs
2023/06/07 08:04:58 - mmengine - INFO - Epoch(val) [39][100/137]    eta: 0:00:01  time: 0.0455  data_time: 0.0016  memory: 1699  
2023/06/07 08:05:00 - mmengine - INFO - Epoch(val) [39][137/137]    accuracy/top1: 92.8229  data_time: 0.0039  time: 0.0476
2023/06/07 08:05:11 - mmengine - INFO - Epoch(train) [40][100/137]  lr: 1.2500e-02  eta: 0:00:03  time: 0.1039  data_time: 0.0005  memory: 1699  loss: 0.4544
2023/06/07 08:05:14 - mmengine - INFO - Exp name: config_20230607_075047
2023/06/07 08:05:14 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/07 08:05:20 - mmengine - INFO - Epoch(val) [40][100/137]    eta: 0:00:01  time: 0.0442  data_time: 0.0003  memory: 1699  
2023/06/07 08:05:22 - mmengine - INFO - Epoch(val) [40][137/137]    accuracy/top1: 93.4400  data_time: 0.0035  time: 0.0473
2023/06/07 08:05:22 - mmengine - INFO - The previous best checkpoint /home/zhy/mmlab lear/fruit_30_cls/work_dir/best_accuracy_top1_epoch_36.pth is removed
2023/06/07 08:05:22 - mmengine - INFO - The best checkpoint with 93.4400 accuracy/top1 at 40 epoch is saved to best_accuracy_top1_epoch_40.pth.
