2023/06/09 08:19:29 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.16 (main, Mar  8 2023, 14:00:05) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1450279875
    GPU 0,1: NVIDIA GeForce RTX 3060 Ti
    CUDA_HOME: /usr/local/cuda-11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.64
    GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
    PyTorch: 2.0.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/09 08:19:30 - mmengine - INFO - Config:
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=10, max_keep_ckpts=3),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'checkpoint/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=50,
    val_interval=5,
    dynamic_intervals=[(280, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', start_factor=0.0001, by_epoch=True, begin=0, end=10),
    dict(
        type='CosineAnnealingLR',
        eta_min=1e-05,
        begin=10,
        end=50,
        T_max=50,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.0003, weight_decay=0.0003),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=8,
    num_workers=5,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root='./data/balloon/train/',
        ann_file='coco_train.json',
        data_prefix=dict(img=''),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(255, 192, 203)])),
    pin_memory=True)
val_dataloader = dict(
    batch_size=5,
    num_workers=10,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='./data/balloon/val/',
        ann_file='coco_val.json',
        data_prefix=dict(img=''),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(255, 192, 203)])))
test_dataloader = dict(
    batch_size=5,
    num_workers=10,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='./data/balloon/val/',
        ann_file='coco_val.json',
        data_prefix=dict(img=''),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(255, 192, 203)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='./data/balloon/val/coco_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file='./data/balloon/val/coco_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
img_scales = [(640, 640), (320, 320), (960, 960)]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        )),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        feat_channels=96,
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        with_objectness=False,
        exp_on_reg=False,
        share_conv=True,
        pred_kernel_size=1,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=30000,
        min_bbox_size=0,
        score_thr=0.001,
        nms=dict(type='nms', iou_threshold=0.65),
        max_per_img=300))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
max_epochs = 300
stage2_num_epochs = 5
base_lr = 0.004
interval = 10
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=280,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='PackDetInputs')
        ])
]
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
metainfo = dict(classes=('balloon', ), palette=[(255, 192, 203)])
work_dir = 'work_dir'
launcher = 'none'

2023/06/09 08:19:31 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/09 08:19:31 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/09 08:19:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/09 08:19:33 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2023/06/09 08:19:33 - mmengine - INFO - Load checkpoint from checkpoint/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2023/06/09 08:19:33 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/09 08:19:33 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/09 08:19:33 - mmengine - INFO - Checkpoints will be saved to /home/zhy/mmlab lear/balloon_det/work_dir.
2023/06/09 08:19:36 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:36 - mmengine - INFO - Epoch(train)  [1][8/8]  lr: 3.0000e-08  eta: 0:02:45  time: 0.4215  data_time: 0.1367  memory: 2663  loss: 2.7550  loss_cls: 2.0727  loss_bbox: 0.6823
2023/06/09 08:19:38 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:38 - mmengine - INFO - Epoch(train)  [2][8/8]  lr: 3.3360e-05  eta: 0:02:15  time: 0.3532  data_time: 0.1444  memory: 2663  loss: 2.7585  loss_cls: 2.0777  loss_bbox: 0.6807
2023/06/09 08:19:41 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:41 - mmengine - INFO - Epoch(train)  [3][8/8]  lr: 6.6690e-05  eta: 0:02:02  time: 0.3249  data_time: 0.1415  memory: 2663  loss: 2.7748  loss_cls: 2.1039  loss_bbox: 0.6709
2023/06/09 08:19:43 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:43 - mmengine - INFO - Epoch(train)  [4][8/8]  lr: 1.0002e-04  eta: 0:01:56  time: 0.3165  data_time: 0.1452  memory: 2663  loss: 2.7847  loss_cls: 2.1245  loss_bbox: 0.6602
2023/06/09 08:19:45 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:45 - mmengine - INFO - Epoch(train)  [5][8/8]  lr: 1.3335e-04  eta: 0:01:50  time: 0.3070  data_time: 0.1429  memory: 2663  loss: 2.7851  loss_cls: 2.1366  loss_bbox: 0.6485
2023/06/09 08:19:46 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:19:46 - mmengine - INFO - bbox_mAP_copypaste: 0.383 0.428 0.428 0.000 0.000 0.531
2023/06/09 08:19:46 - mmengine - INFO - Epoch(val) [5][3/3]    coco/bbox_mAP: 0.3830  coco/bbox_mAP_50: 0.4280  coco/bbox_mAP_75: 0.4280  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0000  coco/bbox_mAP_l: 0.5310  data_time: 0.1288  time: 0.1734
2023/06/09 08:19:48 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:48 - mmengine - INFO - Epoch(train)  [6][8/8]  lr: 1.6668e-04  eta: 0:01:46  time: 0.3016  data_time: 0.1431  memory: 2663  loss: 2.7731  loss_cls: 2.1433  loss_bbox: 0.6298
2023/06/09 08:19:50 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:50 - mmengine - INFO - Epoch(train)  [7][8/8]  lr: 2.0001e-04  eta: 0:01:43  time: 0.2746  data_time: 0.1405  memory: 2663  loss: 2.7264  loss_cls: 2.1277  loss_bbox: 0.5987
2023/06/09 08:19:52 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:52 - mmengine - INFO - Epoch(train)  [8][8/8]  lr: 2.3334e-04  eta: 0:01:39  time: 0.2718  data_time: 0.1397  memory: 2663  loss: 2.5889  loss_cls: 2.0418  loss_bbox: 0.5471
2023/06/09 08:19:55 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:55 - mmengine - INFO - Epoch(train)  [9][8/8]  lr: 2.6667e-04  eta: 0:01:36  time: 0.2713  data_time: 0.1391  memory: 2663  loss: 2.3865  loss_cls: 1.8872  loss_bbox: 0.4993
2023/06/09 08:19:57 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:19:57 - mmengine - INFO - Epoch(train) [10][8/8]  lr: 3.0000e-04  eta: 0:01:33  time: 0.2701  data_time: 0.1383  memory: 2663  loss: 2.0995  loss_cls: 1.6502  loss_bbox: 0.4494
2023/06/09 08:19:57 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/09 08:19:58 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:19:58 - mmengine - INFO - bbox_mAP_copypaste: 0.616 0.758 0.737 0.000 0.335 0.721
2023/06/09 08:19:58 - mmengine - INFO - Epoch(val) [10][3/3]    coco/bbox_mAP: 0.6160  coco/bbox_mAP_50: 0.7580  coco/bbox_mAP_75: 0.7370  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3350  coco/bbox_mAP_l: 0.7210  data_time: 0.0442  time: 0.0817
2023/06/09 08:20:00 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:00 - mmengine - INFO - Epoch(train) [11][8/8]  lr: 2.9978e-04  eta: 0:01:31  time: 0.2725  data_time: 0.1409  memory: 2663  loss: 1.7927  loss_cls: 1.3935  loss_bbox: 0.3992
2023/06/09 08:20:03 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:03 - mmengine - INFO - Epoch(train) [12][8/8]  lr: 2.9899e-04  eta: 0:01:28  time: 0.2749  data_time: 0.1424  memory: 2663  loss: 1.4903  loss_cls: 1.1355  loss_bbox: 0.3548
2023/06/09 08:20:05 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:05 - mmengine - INFO - Epoch(train) [13][8/8]  lr: 2.9764e-04  eta: 0:01:26  time: 0.2737  data_time: 0.1409  memory: 2663  loss: 1.1978  loss_cls: 0.8755  loss_bbox: 0.3223
2023/06/09 08:20:07 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:07 - mmengine - INFO - Epoch(train) [14][8/8]  lr: 2.9572e-04  eta: 0:01:23  time: 0.2747  data_time: 0.1417  memory: 2663  loss: 0.9715  loss_cls: 0.6728  loss_bbox: 0.2988
2023/06/09 08:20:09 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:09 - mmengine - INFO - Epoch(train) [15][8/8]  lr: 2.9325e-04  eta: 0:01:21  time: 0.2762  data_time: 0.1427  memory: 2663  loss: 0.8589  loss_cls: 0.5698  loss_bbox: 0.2891
2023/06/09 08:20:10 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:20:10 - mmengine - INFO - bbox_mAP_copypaste: 0.685 0.806 0.746 0.010 0.451 0.785
2023/06/09 08:20:10 - mmengine - INFO - Epoch(val) [15][3/3]    coco/bbox_mAP: 0.6850  coco/bbox_mAP_50: 0.8060  coco/bbox_mAP_75: 0.7460  coco/bbox_mAP_s: 0.0100  coco/bbox_mAP_m: 0.4510  coco/bbox_mAP_l: 0.7850  data_time: 0.0450  time: 0.0715
2023/06/09 08:20:12 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:12 - mmengine - INFO - Epoch(train) [16][8/8]  lr: 2.9023e-04  eta: 0:01:19  time: 0.2811  data_time: 0.1472  memory: 2663  loss: 0.7760  loss_cls: 0.5040  loss_bbox: 0.2721
2023/06/09 08:20:14 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:14 - mmengine - INFO - Epoch(train) [17][8/8]  lr: 2.8668e-04  eta: 0:01:16  time: 0.2785  data_time: 0.1450  memory: 2663  loss: 0.7319  loss_cls: 0.4706  loss_bbox: 0.2613
2023/06/09 08:20:17 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:17 - mmengine - INFO - Epoch(train) [18][8/8]  lr: 2.8261e-04  eta: 0:01:14  time: 0.2799  data_time: 0.1469  memory: 2663  loss: 0.6887  loss_cls: 0.4377  loss_bbox: 0.2510
2023/06/09 08:20:19 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:19 - mmengine - INFO - Epoch(train) [19][8/8]  lr: 2.7803e-04  eta: 0:01:11  time: 0.2790  data_time: 0.1462  memory: 2663  loss: 0.6517  loss_cls: 0.4070  loss_bbox: 0.2447
2023/06/09 08:20:21 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:21 - mmengine - INFO - Epoch(train) [20][8/8]  lr: 2.7297e-04  eta: 0:01:09  time: 0.2741  data_time: 0.1416  memory: 2663  loss: 0.6356  loss_cls: 0.3964  loss_bbox: 0.2392
2023/06/09 08:20:21 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/09 08:20:22 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:20:22 - mmengine - INFO - bbox_mAP_copypaste: 0.722 0.833 0.808 0.000 0.527 0.820
2023/06/09 08:20:22 - mmengine - INFO - Epoch(val) [20][3/3]    coco/bbox_mAP: 0.7220  coco/bbox_mAP_50: 0.8330  coco/bbox_mAP_75: 0.8080  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.5270  coco/bbox_mAP_l: 0.8200  data_time: 0.0437  time: 0.0698
2023/06/09 08:20:24 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:24 - mmengine - INFO - Epoch(train) [21][8/8]  lr: 2.6745e-04  eta: 0:01:06  time: 0.2716  data_time: 0.1399  memory: 2663  loss: 0.6023  loss_cls: 0.3719  loss_bbox: 0.2304
2023/06/09 08:20:26 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:26 - mmengine - INFO - Epoch(train) [22][8/8]  lr: 2.6148e-04  eta: 0:01:03  time: 0.2659  data_time: 0.1342  memory: 2663  loss: 0.5942  loss_cls: 0.3664  loss_bbox: 0.2278
2023/06/09 08:20:29 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:29 - mmengine - INFO - Epoch(train) [23][8/8]  lr: 2.5509e-04  eta: 0:01:01  time: 0.2651  data_time: 0.1335  memory: 2663  loss: 0.5748  loss_cls: 0.3508  loss_bbox: 0.2240
2023/06/09 08:20:31 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:31 - mmengine - INFO - Epoch(train) [24][8/8]  lr: 2.4830e-04  eta: 0:00:59  time: 0.2605  data_time: 0.1291  memory: 2663  loss: 0.5650  loss_cls: 0.3418  loss_bbox: 0.2231
2023/06/09 08:20:33 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:33 - mmengine - INFO - Epoch(train) [25][8/8]  lr: 2.4115e-04  eta: 0:00:57  time: 0.2662  data_time: 0.1349  memory: 2663  loss: 0.5607  loss_cls: 0.3388  loss_bbox: 0.2219
2023/06/09 08:20:33 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:20:34 - mmengine - INFO - bbox_mAP_copypaste: 0.708 0.839 0.773 0.000 0.440 0.816
2023/06/09 08:20:34 - mmengine - INFO - Epoch(val) [25][3/3]    coco/bbox_mAP: 0.7080  coco/bbox_mAP_50: 0.8390  coco/bbox_mAP_75: 0.7730  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4400  coco/bbox_mAP_l: 0.8160  data_time: 0.0532  time: 0.0790
2023/06/09 08:20:36 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:36 - mmengine - INFO - Epoch(train) [26][8/8]  lr: 2.3365e-04  eta: 0:00:54  time: 0.2681  data_time: 0.1372  memory: 2663  loss: 0.5573  loss_cls: 0.3355  loss_bbox: 0.2218
2023/06/09 08:20:38 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:38 - mmengine - INFO - Epoch(train) [27][8/8]  lr: 2.2585e-04  eta: 0:00:52  time: 0.2713  data_time: 0.1401  memory: 2663  loss: 0.5362  loss_cls: 0.3194  loss_bbox: 0.2168
2023/06/09 08:20:40 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:40 - mmengine - INFO - Epoch(train) [28][8/8]  lr: 2.1777e-04  eta: 0:00:50  time: 0.2778  data_time: 0.1466  memory: 2663  loss: 0.5321  loss_cls: 0.3161  loss_bbox: 0.2160
2023/06/09 08:20:43 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:43 - mmengine - INFO - Epoch(train) [29][8/8]  lr: 2.0944e-04  eta: 0:00:47  time: 0.2756  data_time: 0.1446  memory: 2663  loss: 0.5198  loss_cls: 0.3073  loss_bbox: 0.2126
2023/06/09 08:20:45 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:45 - mmengine - INFO - Epoch(train) [30][8/8]  lr: 2.0089e-04  eta: 0:00:45  time: 0.2761  data_time: 0.1445  memory: 2663  loss: 0.5171  loss_cls: 0.3022  loss_bbox: 0.2149
2023/06/09 08:20:45 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/09 08:20:46 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:20:46 - mmengine - INFO - bbox_mAP_copypaste: 0.726 0.853 0.783 0.000 0.485 0.837
2023/06/09 08:20:46 - mmengine - INFO - Epoch(val) [30][3/3]    coco/bbox_mAP: 0.7260  coco/bbox_mAP_50: 0.8530  coco/bbox_mAP_75: 0.7830  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4850  coco/bbox_mAP_l: 0.8370  data_time: 0.0437  time: 0.0696
2023/06/09 08:20:48 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:48 - mmengine - INFO - Epoch(train) [31][8/8]  lr: 1.9216e-04  eta: 0:00:43  time: 0.2704  data_time: 0.1385  memory: 2663  loss: 0.5091  loss_cls: 0.2980  loss_bbox: 0.2111
2023/06/09 08:20:50 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:50 - mmengine - INFO - Epoch(train) [32][8/8]  lr: 1.8329e-04  eta: 0:00:40  time: 0.2704  data_time: 0.1383  memory: 2663  loss: 0.5065  loss_cls: 0.2972  loss_bbox: 0.2094
2023/06/09 08:20:52 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:52 - mmengine - INFO - Epoch(train) [33][8/8]  lr: 1.7430e-04  eta: 0:00:38  time: 0.2706  data_time: 0.1386  memory: 2663  loss: 0.4909  loss_cls: 0.2824  loss_bbox: 0.2085
2023/06/09 08:20:55 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:55 - mmengine - INFO - Epoch(train) [34][8/8]  lr: 1.6524e-04  eta: 0:00:36  time: 0.2644  data_time: 0.1322  memory: 2663  loss: 0.4862  loss_cls: 0.2812  loss_bbox: 0.2050
2023/06/09 08:20:57 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:20:57 - mmengine - INFO - Epoch(train) [35][8/8]  lr: 1.5614e-04  eta: 0:00:33  time: 0.2693  data_time: 0.1369  memory: 2663  loss: 0.4929  loss_cls: 0.2852  loss_bbox: 0.2077
2023/06/09 08:20:57 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:20:57 - mmengine - INFO - bbox_mAP_copypaste: 0.713 0.855 0.788 0.000 0.522 0.803
2023/06/09 08:20:57 - mmengine - INFO - Epoch(val) [35][3/3]    coco/bbox_mAP: 0.7130  coco/bbox_mAP_50: 0.8550  coco/bbox_mAP_75: 0.7880  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.5220  coco/bbox_mAP_l: 0.8030  data_time: 0.0448  time: 0.0713
2023/06/09 08:21:00 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:00 - mmengine - INFO - Epoch(train) [36][8/8]  lr: 1.4703e-04  eta: 0:00:31  time: 0.2702  data_time: 0.1378  memory: 2663  loss: 0.4950  loss_cls: 0.2867  loss_bbox: 0.2083
2023/06/09 08:21:02 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:02 - mmengine - INFO - Epoch(train) [37][8/8]  lr: 1.3796e-04  eta: 0:00:29  time: 0.2684  data_time: 0.1356  memory: 2663  loss: 0.4966  loss_cls: 0.2858  loss_bbox: 0.2108
2023/06/09 08:21:04 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:04 - mmengine - INFO - Epoch(train) [38][8/8]  lr: 1.2895e-04  eta: 0:00:27  time: 0.2688  data_time: 0.1358  memory: 2663  loss: 0.4994  loss_cls: 0.2877  loss_bbox: 0.2117
2023/06/09 08:21:06 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:06 - mmengine - INFO - Epoch(train) [39][8/8]  lr: 1.2004e-04  eta: 0:00:24  time: 0.2701  data_time: 0.1365  memory: 2663  loss: 0.4883  loss_cls: 0.2805  loss_bbox: 0.2078
2023/06/09 08:21:08 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:08 - mmengine - INFO - Epoch(train) [40][8/8]  lr: 1.1128e-04  eta: 0:00:22  time: 0.2691  data_time: 0.1356  memory: 2663  loss: 0.4959  loss_cls: 0.2848  loss_bbox: 0.2112
2023/06/09 08:21:08 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/09 08:21:09 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:21:09 - mmengine - INFO - bbox_mAP_copypaste: 0.731 0.850 0.806 0.000 0.523 0.834
2023/06/09 08:21:09 - mmengine - INFO - Epoch(val) [40][3/3]    coco/bbox_mAP: 0.7310  coco/bbox_mAP_50: 0.8500  coco/bbox_mAP_75: 0.8060  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.5230  coco/bbox_mAP_l: 0.8340  data_time: 0.0464  time: 0.0726
2023/06/09 08:21:12 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:12 - mmengine - INFO - Epoch(train) [41][8/8]  lr: 1.0268e-04  eta: 0:00:20  time: 0.2694  data_time: 0.1356  memory: 2663  loss: 0.4953  loss_cls: 0.2853  loss_bbox: 0.2100
2023/06/09 08:21:14 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:14 - mmengine - INFO - Epoch(train) [42][8/8]  lr: 9.4294e-05  eta: 0:00:18  time: 0.2698  data_time: 0.1361  memory: 2663  loss: 0.4779  loss_cls: 0.2734  loss_bbox: 0.2045
2023/06/09 08:21:16 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:16 - mmengine - INFO - Epoch(train) [43][8/8]  lr: 8.6146e-05  eta: 0:00:15  time: 0.2760  data_time: 0.1425  memory: 2663  loss: 0.4679  loss_cls: 0.2673  loss_bbox: 0.2007
2023/06/09 08:21:19 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:19 - mmengine - INFO - Epoch(train) [44][8/8]  lr: 7.8269e-05  eta: 0:00:13  time: 0.2777  data_time: 0.1450  memory: 2663  loss: 0.4489  loss_cls: 0.2543  loss_bbox: 0.1946
2023/06/09 08:21:21 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:21 - mmengine - INFO - Epoch(train) [45][8/8]  lr: 7.0695e-05  eta: 0:00:11  time: 0.2780  data_time: 0.1456  memory: 2663  loss: 0.4540  loss_cls: 0.2582  loss_bbox: 0.1958
2023/06/09 08:21:21 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:21:21 - mmengine - INFO - bbox_mAP_copypaste: 0.740 0.863 0.820 0.000 0.565 0.835
2023/06/09 08:21:21 - mmengine - INFO - Epoch(val) [45][3/3]    coco/bbox_mAP: 0.7400  coco/bbox_mAP_50: 0.8630  coco/bbox_mAP_75: 0.8200  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.5650  coco/bbox_mAP_l: 0.8350  data_time: 0.0542  time: 0.0800
2023/06/09 08:21:23 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:23 - mmengine - INFO - Epoch(train) [46][8/8]  lr: 6.3454e-05  eta: 0:00:09  time: 0.2789  data_time: 0.1467  memory: 2663  loss: 0.4479  loss_cls: 0.2529  loss_bbox: 0.1950
2023/06/09 08:21:26 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:26 - mmengine - INFO - Epoch(train) [47][8/8]  lr: 5.6574e-05  eta: 0:00:06  time: 0.2773  data_time: 0.1461  memory: 2663  loss: 0.4263  loss_cls: 0.2385  loss_bbox: 0.1878
2023/06/09 08:21:28 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:28 - mmengine - INFO - Epoch(train) [48][8/8]  lr: 5.0082e-05  eta: 0:00:04  time: 0.2784  data_time: 0.1473  memory: 2663  loss: 0.4298  loss_cls: 0.2414  loss_bbox: 0.1883
2023/06/09 08:21:30 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:30 - mmengine - INFO - Epoch(train) [49][8/8]  lr: 4.4005e-05  eta: 0:00:02  time: 0.2736  data_time: 0.1425  memory: 2663  loss: 0.4245  loss_cls: 0.2379  loss_bbox: 0.1866
2023/06/09 08:21:33 - mmengine - INFO - Exp name: config_20230609_081929
2023/06/09 08:21:33 - mmengine - INFO - Epoch(train) [50][8/8]  lr: 3.8366e-05  eta: 0:00:00  time: 0.2763  data_time: 0.1452  memory: 2663  loss: 0.4205  loss_cls: 0.2363  loss_bbox: 0.1842
2023/06/09 08:21:33 - mmengine - INFO - Saving checkpoint at 50 epochs
2023/06/09 08:21:34 - mmengine - INFO - Evaluating bbox...
2023/06/09 08:21:34 - mmengine - INFO - bbox_mAP_copypaste: 0.747 0.864 0.804 0.000 0.566 0.845
2023/06/09 08:21:34 - mmengine - INFO - Epoch(val) [50][3/3]    coco/bbox_mAP: 0.7470  coco/bbox_mAP_50: 0.8640  coco/bbox_mAP_75: 0.8040  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.5660  coco/bbox_mAP_l: 0.8450  data_time: 0.0440  time: 0.0705
